# Hyperparameters follow Hessel et al. (2018), except for sticky_actions,
# which was False (not using sticky actions) in the original paper.
# This is a low-resource version of the larger rainbow_coinflip, to test if things work.
import dopamine.discrete_domains.atari_lib
import dopamine.replay_memory.prioritized_replay_buffer
import bonus_based_exploration.intrinsic_motivation.intrinsic_rainbow_agent
import bonus_based_exploration.intrinsic_motivation.intrinsic_rewards
import bonus_based_exploration.run_experiment
import gin.tf.external_configurables

create_exploration_agent.agent_name = 'rainbow_coinflip'
create_exploration_runner.render = False
create_exploration_runner.conditional_render = False

CoinFlipRainbowAgent.num_atoms = 51
CoinFlipRainbowAgent.vmax = 10.
CoinFlipRainbowAgent.gamma = 0.99
CoinFlipRainbowAgent.update_horizon = 3
CoinFlipRainbowAgent.min_replay_history = 1000  # agent steps
CoinFlipRainbowAgent.update_period = 4
CoinFlipRainbowAgent.target_update_period = 8000  # agent steps
CoinFlipRainbowAgent.epsilon_train = 0.01
CoinFlipRainbowAgent.epsilon_eval = 0.001
CoinFlipRainbowAgent.epsilon_decay_period = 250000  # agent steps
CoinFlipRainbowAgent.replay_scheme = 'prioritized'
CoinFlipRainbowAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
CoinFlipRainbowAgent.optimizer = @tf.train.AdamOptimizer()

# Note these parameters are different from C51's.
tf.train.AdamOptimizer.learning_rate = 0.0000625
tf.train.AdamOptimizer.epsilon = 0.00015

# Parameters for the agent density model
_coin_flip_network_template.n_conv_layers = 3 # 0, 1, 2, or 3. 3 is RND architecture, 0 is flattened linear
CoinFlipCounterIntrinsicReward.reward_scale = 0.01 # untested
CoinFlipCounterIntrinsicReward.ipd_scale = 0.1
CoinFlipCounterIntrinsicReward.observation_shape = (84, 84)
CoinFlipCounterIntrinsicReward.resize_shape = (84, 84)
CoinFlipCounterIntrinsicReward.tf_device = '/gpu:0'
CoinFlipCounterIntrinsicReward.optimizer = @tf.train.RMSPropOptimizer()
CoinFlipCounterIntrinsicReward.intrinsic_replay_start_size = 1000
CoinFlipCounterIntrinsicReward.intrinsic_replay_buffer_size = 10000
CoinFlipCounterIntrinsicReward.batch_size = 32 # effectively 256 because of update_period
CoinFlipCounterIntrinsicReward.update_period = 4
CoinFlipCounterIntrinsicReward.output_dimensions = 20
CoinFlipCounterIntrinsicReward.use_final_tanh = False

tf.train.RMSPropOptimizer.learning_rate = 1e-5
tf.train.RMSPropOptimizer.momentum = 0.9
tf.train.RMSPropOptimizer.epsilon = 0.0001

atari_lib.create_atari_environment.game_name = 'MontezumaRevenge'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
Runner.num_iterations = 200
Runner.training_steps = 1000  # agent steps
Runner.evaluation_steps = 100  # agent steps
Runner.max_steps_per_episode = 1000  # agent steps

AtariPreprocessing.terminal_on_life_loss = False

WrappedPrioritizedReplayBuffer.replay_capacity = 10000
WrappedPrioritizedReplayBuffer.batch_size = 32
